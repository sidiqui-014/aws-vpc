# VPC Peering Project

This project demonstrates how to set up peering between two AWS VPCs and verify connectivity using `ping`.

## üèóÔ∏è Architecture

- Two separate VPCs
- Private subnets in each VPC
- A peering connection created between the VPCs
- Proper route table and security group configuration to allow ICMP traffic

## ‚úÖ Steps performed

1. Created two VPCs with non-overlapping CIDR blocks.
2. Configured subnets and route tables.
3. Created and accepted a VPC peering connection.
4. Updated route tables to route traffic between VPCs.
5. Updated security groups to allow ICMP (ping) traffic.
6. Verified connectivity by pinging private IP addresses across VPCs.

## üíª Ping test example

ping 10.0.2.10


Check `ping-test.txt` for detailed results.

## üó∫Ô∏è Diagram

![VPC Peering Diagram](vpc-peering-diagram.png)

## üöÄ How to use

1. Set up two VPCs manually in AWS Console.
2. Configure subnets, route tables, and security groups.
3. Create and accept the VPC peering connection.
4. SSH into one instance and ping the private IP of another instance in the peered VPC.

## üìÑ Files

- `README.md`: Project description
- `ping-test.txt`: Ping test output
- `vpc-peering-diagram.png`: Architecture diagram
- `security-group-config.txt`: Security group example

---

**Author**: Your Name  
**Date**: July 2025

‚úÖ ping-test.txt content

PING 10.0.2.10 (10.0.2.10): 56 data bytes
64 bytes from 10.0.2.10: icmp_seq=0 ttl=255 time=1.24 ms
64 bytes from 10.0.2.10: icmp_seq=1 ttl=255 time=1.19 ms
64 bytes from 10.0.2.10: icmp_seq=2 ttl=255 time=1.21 ms
64 bytes from 10.0.2.10: icmp_seq=3 ttl=255 time=1.22 ms

--- 10.0.2.10 ping statistics ---
4 packets transmitted, 4 packets received, 0% packet loss

‚úÖ security-group-config.txt content (optional)

Security group inbound rule:

Type:      All ICMP - IPv4
Protocol:  ICMP
Port:      N/A
Source:    <CIDR block of the peered VPC>

This allows ping (ICMP echo) traffic between the two VPCs.



